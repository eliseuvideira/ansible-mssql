---
- set_fact:
    database_directory: "{{ mssql_root_directory }}/{{ database_identifier }}"

- name: Create Database Directory
  file:
    path: "{{ database_directory }}"
    state: directory

- name: Clone and Update Git Repo
  git:
    repo: https://github.com/eliseuvideira/mssql.git
    dest: "{{ database_directory }}"

- name: Configure Permissions For Directories
  become: true
  become_user: root
  file:
    path: "{{ item }}"
    state: directory
    owner: "10001"
    group: "root"
  with_items:
    - "{{ database_directory }}/backups"
    - "{{ database_directory }}/database"

- name: Create `.env` File
  template:
    src: environment.j2
    dest: "{{ database_directory }}/.env"

- name: Check Database Running
  shell: |
    #!/bin/sh
    cd "{{ database_directory }}"
    /usr/bin/docker-compose ps mssql --status=running --quiet 2>/dev/null || true
  register: check_database_running
  changed_when: check_database_running.stdout == ""

- set_fact:
    database_running: "{{ check_database_running.stdout != '' }}"

- name: Start Database
  shell: |
    #!/bin/sh
    cd "{{ database_directory }}"
    /usr/bin/docker-compose up --detach --wait
  when: database_running == false

- name: Wait Starting Database
  pause:
    seconds: 10
  when: database_running == false

- name: Check Database Exists
  shell: |
    #!/bin/sh
    /usr/bin/docker run \
      --rm \
      -i \
      mcr.microsoft.com/mssql-tools \
      /opt/mssql-tools/bin/sqlcmd \
      -S "{{ database_server }},{{ database_port }}" \
      -U "{{ database_user }}" \
      -P "{{ database_password }}" \
      -h -1 \
      -s "," \
      -W \
      -Q "set nocount on; select name from sys.databases where name = '{{ database_database }}';"
  register: ensure_database_exists
  changed_when: ensure_database_exists.stdout != database_database

- set_fact: database_exists={{ ensure_database_exists.stdout == database_database }}

- name: Create Database
  shell: |
    #!/bin/sh
    /usr/bin/docker run \
      --rm \
      -i \
      mcr.microsoft.com/mssql-tools \
      /opt/mssql-tools/bin/sqlcmd \
      -S "{{ database_server }},{{ database_port }}" \
      -U "{{ database_user }}" \
      -P "{{ database_password }}" \
      -h -1 \
      -s "," \
      -W \
      -Q "create database [{{ database_database }}];"
  when: database_exists == false

- name: Configure Crontab Backups
  become: true
  become_user: root
  cron:
    name: "MSSQL Database Backup for {{ database_identifier }}"
    minute: "20"
    hour: "*/4"
    day: "*"
    month: "*"
    weekday: "*"
    user: root
    job: "{{ database_directory }}/scripts/create-backup"

- name: Create `SERVICES` File
  file:
    path: ~/SERVICES
    state: touch
    modification_time: preserve
    access_time: preserve

- name: Configure `SERVICES` Header
  lineinfile:
    path: ~/SERVICES
    state: present
    regex: "^PORT "
    line: '{{ "%-10s" | format("PORT") }} {{ "%-10s" | format("STATUS") }} {{ "%-20s" | format("GROUP") }} {{ "%-8s" | format("DOCKER") }} {{ "%s" | format("SERVICE") }}'

- name: Configure `SERVICES` Service
  lineinfile:
    path: ~/SERVICES
    state: present
    regex: "^{{ database_port }} "
    line: '{{ "%-10s" | format(database_port) }} {{ "%-10s" | format("enabled") }} {{ "%-20s" | format(database_group) | truncate(20, True, "") }} {{ "%-8s" | format("yes") }} {{ "%s" | format(database_identifier) }}'

- name: Sort `SERVICES` File
  shell: |
    #!/usr/bin/env bash
    changed_rows="$(comm -23 <(head -n 1 SERVICES && tail -n +2 SERVICES | sort) <(cat SERVICES) | wc -l)"
    if [ "$changed_rows" != "0" ]; then
      sorted="$(head -n 1 SERVICES && tail -n +2 SERVICES | sort)"
      printf "%s\n" "$sorted" >~/SERVICES
    fi
    echo "$changed_rows"
  register: sort_services_file
  changed_when: sort_services_file.stdout != "0"
